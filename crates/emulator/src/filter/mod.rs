/*
 * XBR filter: from the FFmpeg project
 *
 * Copyright (c) 2011, 2012 Hyllian/Jararaca <sergiogdb@gmail.com>
 * Copyright (c) 2014 Arwa Arif <arwaarif1994@gmail.com>
 * Copyright (c) 2015 Treeki <treeki@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/*
 * Modified by Thomas Reichert
 * Removed DLL-specific declspec modifiers to allow building as a static lib.
 * Removed hqx functionality.
 * Unravelled some macros.
 * Converted to Rust.
 * Converted macros to functions, to favour safety over performance.
 *
 * Algorithm explained:
 * https://forums.libretro.com/t/xbr-algorithm-tutorial/123
 */

mod xbr_params;

pub use xbr_params::XbrParams;

#[cfg(test)]
mod tests {
    use super::XbrParams;

    const SOURCE_DATA: [u32; 20] = [
        0xffffffff, 0xff000000, 0xffffffff, 0xffffffff, 0xffc44040,
        0xffffffff, 0xffffffff, 0xff000000, 0xff808080, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xff808080, 0xff808080, 0xffc4c4c4,
        0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c4c4, 0xff40c440
    ];

    const EXPECTED_OUTPUT_2X: [u32; 80] = [
        0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff7f7f7f, 0xff7f7f7f, 0xffffffff, 0xffffffff, 0xffe19f9f, 0xffc48240, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff7f7f7f, 0xff7f7f7f, 0xff404040, 0xffbfbfbf, 0xffa2a260, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff404040, 0xff404040, 0xff808080, 0xff808080, 0xffc4c482, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffbfbfbf, 0xff808080, 0xff808080, 0xff808080, 0xffa2a2a2, 0xffc4c4c4,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffbfbfbf, 0xffa2a260, 0xff808080, 0xff808080, 0xffa2a2a2, 0xff82c482, 0xffc4c4c4,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffe19f9f, 0xffc48240, 0xffa2a260, 0xffc4c482, 0xffa2a2a2, 0xff82c482, 0xff40c440,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c440, 0xffc4c4c4, 0xffc4c4c4, 0xff40c440, 0xff40c440
    ];

    const EXPECTED_OUTPUT_3X: [u32; 180] = [
        0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffc44040, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffc44040, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff000000, 0xff7f7f7f, 0xff7f7f7f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffe19f9f, 0xffc48240, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff7f7f7f, 0xff000000, 0xff7f7f7f, 0xff404040, 0xff808080, 0xffbfbfbf, 0xffa2a260, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xff808080, 0xff808080, 0xff808080, 0xffc4c440, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff404040, 0xff000000, 0xff404040, 0xff808080, 0xff808080, 0xff808080, 0xffc4c482, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffbfbfbf, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffa2a2a2, 0xffc4c4c4, 0xffc4c4c4,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffbfbfbf, 0xffa2a260, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffa2a2a2, 0xff82c482, 0xffc4c4c4, 0xffc4c4c4,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffe19f9f, 0xffc48240, 0xffc4c440, 0xffa2a260, 0xffc4c482, 0xffc4c4c4, 0xffa2a2a2, 0xff82c482, 0xff40c440, 0xff40c440,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xff40c440, 0xff40c440, 0xff40c440,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xff40c440, 0xff40c440, 0xff40c440
    ];

    const EXPECTED_OUTPUT_4X: [u32; 320] = [
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff000000, 0xff000000, 0xff7f7f7f, 0xff7f7f7f, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffe19f9f, 0xffc48240, 0xffc44040, 0xffc44040, 0xffc44040,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff7f7f7f, 0xff7f7f7f, 0xff000000, 0xff000000, 0xff7f7f7f, 0xff404040, 0xff808080, 0xff808080, 0xffbfbfbf, 0xffa2a260, 0xffc4c440, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff404040, 0xff000000, 0xff000000, 0xff404040, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffc4c482, 0xffc4c440, 0xffc4c440, 0xffc4c440,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffbfbfbf, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffa2a2a2, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffbfbfbf, 0xffa2a260, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xff808080, 0xffa2a2a2, 0xff82c482, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffe19f9f, 0xffc48240, 0xffc4c440, 0xffc4c440, 0xffa2a260, 0xffc4c482, 0xffc4c4c4, 0xffc4c4c4, 0xffa2a2a2, 0xff82c482, 0xff40c440, 0xff40c440, 0xff40c440,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xff40c440, 0xff40c440, 0xff40c440, 0xff40c440,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xff40c440, 0xff40c440, 0xff40c440, 0xff40c440,
        0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc44040, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c440, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xffc4c4c4, 0xff40c440, 0xff40c440, 0xff40c440, 0xff40c440
    ];

    fn make_params(scale: usize) -> XbrParams {
        let input_width = 5;
        let input_height = 4;
        let params = XbrParams::new(
            scale,
            input_width,
            input_height);
        {
            let mut output_data = params.input.borrow_mut();
            for i in 0..SOURCE_DATA.len() {
                output_data[i] = SOURCE_DATA[i];
            }
        }
        params
    }

    #[test]
    fn can_filter_2x() {
        let mut params = make_params(2);
        params.perform_filter();

        let actual_output = params.output.borrow();
        assert_eq!(actual_output.as_slice(), EXPECTED_OUTPUT_2X);
    }

    #[test]
    fn can_filter_3x() {
        let mut params = make_params(3);
        params.perform_filter();

        let actual_output = params.output.borrow();
        assert_eq!(actual_output.as_slice(), EXPECTED_OUTPUT_3X);
    }

    #[test]
    fn can_filter_4x() {
        let mut params = make_params(4);
        params.perform_filter();

        let actual_output = params.output.borrow();
        assert_eq!(actual_output.as_slice(), EXPECTED_OUTPUT_4X);
    }
}
